Question:
Provide a list of research paper titles and IDs that have benchmarked models on the Yelp Binary classification dataset?

Generated SPARQL:
 SELECT DISTINCT?paper?paper_lbl
     WHERE {
      ?dataset       a                orkgc:Dataset;
                      rdfs:label      ?dataset_lbl.
       FILTER (str(?dataset_lbl) = "Yelp Binary classification")
      ?benchmark      orkgp:HAS_DATASET      ?dataset.
      ?cont          orkgp:HAS_BENCHMARK     ?benchmark.
      ?paper         orkgp:P31               ?cont;
                      rdfs:label              ?paper_lbl.
     }```python
SELECT DISTINCT?paper?paper_lbl
WHERE {
 ?dataset       a                orkgc:Dataset;
                 rdfs:label      ?dataset_lbl.
  FILTER (str(?dataset_lbl) = "Yelp Binary classification")
 ?benchmark      orkgp:HAS_DATASET      ?dataset.
 ?cont          orkgp:HAS_BENCHMARK     ?benchmark.
 ?paper         orkgp:P31               ?cont;
                 rdfs:label              ?paper_lbl.
}
```python
def generate_sparql_query(input_question, context):
    # The provided context is empty, so we can't find any matching papers.
    # Therefore, the top 5 similar entities would be an empty list.
    similar_entities = []
    orkg_graph = get_orkg_graph()
    query = """
      SELECT DISTINCT?paper?paper_lbl
      WHERE {
       ?dataset       a                orkgc:Dataset;
                       rdfs:label      ?dataset_lbl.
        FILTER (str(?dataset_lbl) = "Yelp Binary classification")
       ?benchmark      orkgp:HAS_DATASET      ?dataset.
       ?cont          orkgp:HAS_BENCHMARK     ?benchmark.
       ?paper         orkgp:P31               ?cont;
                      rdfs:label              ?paper_lbl.
      }
    """
    return orkg_graph.query(query), similar_entities

# Example usage:
input_question = "Provide a list of research paper titles and IDs that have benchmarked models on the Yelp Binary classification dataset?"
context = []
query_result, _ = generate_sparql_query(input_question, context)
print(query_result)```python
def generate_sparql_query(input_question, context):
    # The provided context is empty, so we can't find any matching papers.
    # Therefore, the top 5 similar entities would be an empty list.
    similar_entities = []
    orkg_graph = get_orkg_graph()
    query = """
      SELECT DISTINCT?paper?paper_lbl
      WHERE {
       ?dataset       a                orkgc:Dataset;
                       rdfs:label      ?dataset_lbl.
        FILTER (str(?dataset_lbl) = "Yelp Binary classification")
       ?benchmark      orkgp:HAS_DATASET      ?dataset.
       ?cont          orkgp:HAS_BENCHMARK     ?benchmark.
       ?paper         orkgp:P31               ?cont;
                      rdfs:label              ?paper_lbl.
      }
    """
    return orkg_graph.query(query), similar_entities

# Example usage:
input_question = "Provide a list of research paper titles and IDs that have benchmarked models on the Yelp Binary classification dataset?"
context = []
query_result, _ = generate_sparql_query(input_question, context)
print(query_result)```python
def generate_sparql_query(input_question, context):
    # The provided context is empty, so we can't find any matching papers.
    # Therefore, the top 5 similar entities would be an empty list.
    similar_entities = []
    orkg_graph = get_orkg_graph()
    query = """
      SELECT DISTINCT?paper?paper_lbl
      WHERE {
       ?dataset       a                orkgc:Dataset;
                       rdfs:label      ?dataset_lbl.
        FILTER (str(?dataset_lbl) = "Yelp Binary classification")
       ?benchmark      orkgp:HAS_DATASET      ?dataset.
       ?cont          orkgp:HAS_BENCHMARK     ?benchmark.
       ?paper         orkgp:P31               ?cont;
                      rdfs:label              ?paper_lbl.
      }
    """
    return orkg_graph.query(query), similar_entities

# Example usage:
input_question = "Provide a list of research paper titles and IDs that have benchmarked models on the Yelp Binary classification dataset?"
context = []
query_result, _ = generate_sparql_query(input_question, context)
print(query_result)```python
def generate_sparql_query(input_question, context):
    # The provided context is empty, so we can't find any matching papers.
    # Therefore, the top 5 similar entities would be an empty list.
    similar_entities = []
    orkg_graph = get_orkg_graph()
    query = """
      SELECT DISTINCT?paper?paper_lbl
      WHERE {
       ?dataset       a                orkgc:Dataset;
                       rdfs:label      ?dataset_lbl.
        FILTER (str(?dataset_lbl) = "Y
