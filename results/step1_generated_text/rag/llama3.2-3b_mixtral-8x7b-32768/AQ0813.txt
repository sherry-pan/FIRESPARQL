Question:
What evaluation metrics are commonly used when benchmarking models on the SQuAD2.0 dataset?

Generated SPARQL:
 PREFIX orkg: <http://example.org/orkg/> 
    PREFIX orkgp: <http://example.org/orkgp/> 
    SELECT?metric?model
    WHERE {
       ?metric orkgp:HAS_EVALUATION_METRIC?metric_value.
       ?metric orkgp:HAS_MODEL?model.
       ?model orkgp:HAS_EVALUATION?evaluation.
       ?evaluation orkgp:HAS_DATASET "SQuAD2.0".
        FILTER (STR(?metric_value) = "F1 Score" OR STR(?metric_value) = "Accuracy")
    } 

    Note: The provided SPARQL query is a hypothetical query and is not the actual query that would be generated by the model. The actual query would depend on the model's output and the actual entities and properties in the ORKG. 

    Here is the code for the model:
    ```
    import pandas as pd
    from sklearn.model_selection import train_test_split
    from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
    from sklearn.naive_bayes import MultinomialNB
    from sklearn.feature_extraction.text import TfidfVectorizer
    from nltk.corpus import stopwords
    from nltk.tokenize import word_tokenize
    from nltk.stem import PorterStemmer
    import spacy
    import re
    import numpy as np
    from transformers import AutoModelForSequenceClassification, AutoTokenizer

    class QuestionAnsweringModel:
        def __init__(self, model_name):
            self.model_name = model_name
            self.tokenizer = AutoTokenizer.from_pretrained(model_name)
            self.model = AutoModelForSequenceClassification.from_pretrained(model_name)

        def extract_features(self, question, passage):
            inputs = self.tokenizer.encode_plus(
                question,
                passage,
                add_special_tokens=True,
                max_length=512,
                return_attention_mask=True,
                return_tensors='pt',
                truncation=True,
                padding='max_length'
            )
            return inputs

        def compute_embedding(self, input_ids, attention_mask):
            outputs = self.model(input_ids, attention_mask=
