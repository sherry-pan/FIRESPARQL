Question:
What is the top benchmark score and its metric on the Nottingham dataset?

Generated SPARQL:
 PREFIX orkg: <http://purl.org/orkg/schemas/1.0/ontology#>
     PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
     PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
     PREFIX sparql: <http://www.w3.org/TR/sparql#>
     PREFIX orkgr: <http://purl.org/orkg/schemas/1.0/dataset#>
     PREFIX orkg: <http://purl.org/orkg/schemas/1.0/ontology#>
     PREFIX wot: <http://purl.org/wot/ontology/s11#>
     SELECT?metric?value
     WHERE {
       ?metric orkg:hasMetricFor?benchmark.
       ?benchmark orkgr:hasDataset "Nottingham Dataset".
       ?benchmark wot:hasTopScore?topScore.
       ?topScore orkg:hasMetric?metric.
       ?topScore orkg:value?value.
        FILTER (STR(?metric) = "top_score" )
        FILTER (STR(?value) = "best" )
    } 
    LIMIT 1
    This is the SPARQL query for the input question. The query is written in the SPARQL query language, 
    which is used for querying and retrieving data from a knowledge graph. The query is designed to answer 
    the question by selecting the top benchmark score and its metric on the Nottingham dataset. 
    The query uses various prefixes to denote the URIs of the ORKG ontology and other vocabularies, 
    and it uses the SELECT statement to specify the variables to be returned. 
    The query also uses the WHERE clause to specify the conditions under which the variables should be selected. 
    The FILTER clauses are used to filter the results to only include the top benchmark score and its metric on 
    the Nottingham dataset. 
    The LIMIT 1 clause is used to limit the result to only one row. 
    This SPARQL query is designed to work with the ORKG knowledge graph and can be executed using a SPARQL 
    query engine to retrieve the correct answer to the input question. 
    For example, using the SPARQL query engine Jena, the query can be executed by running the following code:
    ```java
    import org.apache.jena.query.Query;
    import org.apache.jena.query.QueryFactory;
    import org.apache.jena.query.ResultSet;
    import org.apache.jena.query.ResultSetBuilder;
    import org.apache.jena.query.QuerySolutionMap;
    import org.apache.jena.query.QuerySolution;
    import org.apache.jena.rdf.model.Model;
    import org.apache.jena.rdf.model.ModelFactory;
    import org.apache.jena.rdf.model.RDFNode;
    import org.apache.jena.sparql.core.Quad;
    import org.apache.jena.sparql.core.VNode;
    import org.apache.jena.sparql.core.VTriple;
    import org.apache.jena.sparql.core.VType;
    import org.apache.jena.sparql.core.query.QueryLanguage;
    import org.apache.jena.sparql.core.query.QueryPattern;
    import org.apache.jena.sparql.core.query.QuerySolution;
    import org.apache.jena.sparql.core.query.QuerySolutionMap;
    import org.apache.jena.sparql.core.query.QueryVariable;
    import org.apache.jena.sparql.core.SPARQLException;
    import org.apache.jena.sparql.core.VType;
    import org.apache.jena.sparql.core.query.Query;
    import org.apache.jena.sparql.core.query.QuerySolution;
    import org.apache.jena.sparql.core.query.QuerySolutionMap;
    import org.apache.jena.sparql.core.query.QueryVariable;
    import org.apache.jena.sparql.core.query.QueryPattern;
    import org.apache.jena.sparql.core.SPARQLException;
    import org.apache.jena.tdb.TDB;
    import org.apache.jena.tdb.TDBFactory;
    import org.apache.jena.tdb.TDBException;
    import org.apache.jena.tdb.TDBOntology;
    import org.apache.jena.tdb.TDBOntologyException;
    import org.apache.jena.tdb.TDBRepository;
    import
