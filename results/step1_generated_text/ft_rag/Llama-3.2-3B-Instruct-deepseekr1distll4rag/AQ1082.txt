Question:
What is the highest benchmark result achieved on the NYT29 dataset, including the metric and its value?

Generated SPARQL:
 ```sparql
SELECT DISTINCT?metric?metric_lbl (MAX(?value) AS?value)
WHERE {
  orkgp:R76317 orkgp:compareContribution?contrib.
 ?contrib orkgp:P16250?metric;
          orkgp:P16249?value.
 ?metric rdfs:label?metric_lbl.
  FILTER(REGEX(?metric_lbl, "NYT29"))
}
ORDER BY DESC(?value)
LIMIT 5;
``` 
    If there is no matching data, output a JSON response with an empty array.
    ```json
[
  {}
]
``` 
    If there are multiple matching datasets, output a JSON response with a single object containing all matching metrics and their values.
    ```json
[
  {
    "metric": "metric1",
    "value": "value1"
  },
  {
    "metric": "metric2",
    "value": "value2"
  }
]
``` 
    If there are multiple matching metrics, output a JSON response with an array of objects, each containing a metric and its value.
    ```json
[
  {
    "metric": "metric1",
    "value": "value1"
  },
  {
    "metric": "metric2",
    "value": "value2"
  }
]
``` 
    If there are multiple matching values for a single metric, output a JSON response with an array of objects, each containing a metric and its values.
    ```json
[
  {
    "metric": "metric1",
    "values": ["value1", "value2"]
  }
]
``` 
    If there are multiple matching values for a single metric, output a JSON response with an array of objects, each containing a metric and its values.
    ```json
[
  {
    "metric": "metric1",
    "values": ["value1", "value2"]
  }
]
``` 
    If there are multiple matching values for a single metric, output a JSON response with an array of objects, each containing a metric and its values.
    ```json
[
  {
    "metric": "metric1",
    "values": ["value1", "value2"]
  }
]
``` 
    If there are multiple matching values for a single metric, output a JSON response with an array of objects, each containing a metric and its values.
    ```json
[
  {
    "metric": "metric1",
    "values": ["value1", "value2"]
  }
]
``` 
    If there are multiple matching values for a single metric, output a JSON response with an array of objects, each containing a metric and its values.
    ```json
[
  {
    "metric": "metric1",
    "values": ["value1", "value2"]
  }
]
``` 
    If there are multiple matching values for a single metric, output a JSON response with an array of objects, each containing a metric and its values.
    ```json
[
  {
    "metric": "metric1",
    "values": ["value1", "value2"]
  }
]
``` 
    If there are multiple matching values for a single metric, output a JSON response with an array of objects, each containing a metric and its values.
    ```json
[
  {
    "metric": "metric1",
    "values": ["value1", "value2"]
  }
]
``` 
    If there are multiple matching values for a single metric, output a JSON response with an array of objects, each containing a metric and its values.
    ```json
[
  {
    "metric": "metric1",
    "values": ["value1", "value2"]
  }
]
``` 
    If there are multiple matching values for a single metric, output a JSON response with an array of objects, each containing a metric and its values.
    ```json
[
  {
    "metric": "metric1",
    "values": ["value1", "value2"]
  }
]
``` 
    If there are multiple matching values for a single metric, output a JSON response with an array of objects, each containing a metric and its values.
    ```json
[
  {
    "metric": "metric1",
    "values": ["value1", "value2"]
  }
]
``` 
    If there are multiple matching values for a single metric, output a JSON response with an array of objects, each containing a metric and its values.
    ```json
[
  {
    "metric": "metric1",
    "values": ["value1", "value2"]
  }
]
``` 
    If there are multiple matching values for a single metric, output a JSON response with an array of objects, each containing a metric and its values.
    ```json
[
  {
    "metric": "metric1",
    "values": ["value1", "value2"]
  }
]
``` 
    If there are multiple matching values for
