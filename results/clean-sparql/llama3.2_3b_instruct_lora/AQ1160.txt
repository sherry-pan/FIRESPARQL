SELECT DISTINCT?metric?metric_lbl (MAX(?value) AS?score)
    WHERE {
     ?dataset       a                orkgc:Dataset;
                      rdfs:label      ?dataset_lbl.
      FILTER (str(?dataset_lbl) = "RotoWire (Relation Generation)")
     ?benchmark      orkgp:HAS_DATASET      ?dataset;
                      orkgp:HAS_EVALUATION   ?eval.
     ?eval           orkgp:HAS_VALUE        ?value.
      OPTIONAL {?eval           orkgp:HAS_METRIC        ?metric.
              ?metric          rdfs:label              ?metric_lbl.}
     ?cont         orkgp:HAS_BENCHMARK     ?benchmark.
      OPTIONAL {?cont      orkgp:HAS_MODEL         ?model.
               ?model      rdfs:label              ?model_lbl.}
    } ORDER BY DESC(?score) LIMIT 1;     ``` select distinct?metric?metric_lbl (max(?value) as?score)
    where {
     ?dataset       a                orkgc:Dataset;
                      rdfs:label      ?dataset_lbl.
      filter (str(?dataset_lbl) = "RotoWire (Relation Generation)")
     ?benchmark      orkgp:HAS_DATASET      ?dataset;
                      orkgp:HAS_EVALUATION   ?eval.
     ?eval           orkgp:HAS_VALUE        ?value.
      optional {?eval           orkgp:HAS_METRIC        ?metric.
               ?metric          rdfs:label              ?metric_lbl.}
     ?cont         orkgp:HAS_BENCHMARK     ?benchmark.
      optional {?cont      orkgp:HAS_MODEL         ?model.
               ?model      rdfs:label              ?model_lbl.}
    } order by desc(?score) limit 1; ``` 
    Note that the answer is the top benchmark result, which is the highest score, and is therefore sorted in descending order. The LIMIT 1 clause is used to get only the first (and only) result. 

    If you want to get the top k results, you can replace the LIMIT 1 with LIMIT?k. 

    If you want to get the average score, you can use the AVG function instead of MAX, like this: