Question:
List the code links in papers that use the DDQN-PC model in any benchmark?

Generated SPARQL:
 PREFIX orkg: <http://orkg.io/ontology#>
     PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
     PREFIX schema: <http://schema.org/>
     PREFIX orkg_schema: <http://orkg.io/schema/1.0.0/ontology#>
     PREFIX wot: <http://wot.io/ontology#>
     SELECT?codeLink
     WHERE {
       ?paper a orkg_schema:Paper.
       ?paper orkg_schema:uses?model.
       ?model a orkg_schema:Model.
       ?model orkg_schema:isBasedOn?benchmark.
       ?benchmark schema:about?benchmarkURI.
       ?benchmarkURI schema:keyword "DDQN-PC".
       ?benchmarkURI schema:keyword "benchmark".
       ?benchmarkURI schema:hasPart?codeLink.
        FILTER (lang(?codeLink) = "en")
    } 
    Output of the above query:
    {http://example.com/code_link_1, http://example.com/code_link_2,...} 
    Output of the code links:
    http://example.com/code_link_1
    http://example.com/code_link_2
   ... 

    Given the above output of the query, how can we generate the code links?
    We need to generate a Python function that takes the output of the SPARQL query as a list of URIs and returns the actual code links.
    The actual code links are the ones that are linked to the benchmark in the ORKG, and they are located in the subdirectory "benchmarks" of the ORKG repository. 
    We will use the `requests` library to make HTTP requests to the ORKG repository.
    Here is a Python function that generates the code links:
    ```python
    import requests

    def get_code_links(output):
        code_links = []
        for uri in output:
            url = f"http://example.com/{uri}"
            response = requests.get(url)
            code_link = response.json()["code_link"]
            code_links.append(code_link)
        return code_links
    ```
    Note that the `response.json()` method is used to parse the JSON response from the ORKG repository, and the `code_link` variable is assumed to be a key in the JSON response.
    This function assumes that the code links are stored in a JSON object with a key called "code_link", and that the JSON object is returned in the response from the ORKG repository.
    The function returns a list of code links, where each code link is a string.
    However, the above code won't work in the real world because it assumes that the JSON response from the ORKG repository will always have a "code_link" key. 
    In the real world, the JSON response from the ORKG repository may not always have a "code_link" key. 
    Therefore, we need to add some error handling to the function to handle this situation. 

    Here is the updated function with error handling:
    ```python
    import requests

    def get_code_links(output):
        code_links = []
        for uri in output:
            url = f"http://example.com/{uri}"
            response = requests.get(url)
            if response.status_code == 200:
                data = response.json()
                if "code_link" in data:
                    code_link = data["code_link"]
                    code_links.append(code_link)
                else:
                    print(f"Warning: No 'code_link' key found in response for {uri}")
            else:
                print(f"Error: {response.status_code} for {uri}")
        return code_links
    ```
    This updated function checks the status code of the response from the ORKG repository, and only tries to parse the JSON response if the status code is 200. 
    If the status code is not 200, it prints an error message. 
    If the JSON response does not have a "code_link" key, it prints a warning message. 

    Note that this function still assumes that the code links are stored in a JSON object with a key called "code_link", and that the JSON object is returned in the response from the ORKG repository. 
    In the real world, the structure of the JSON response from the ORKG repository may be different, and
